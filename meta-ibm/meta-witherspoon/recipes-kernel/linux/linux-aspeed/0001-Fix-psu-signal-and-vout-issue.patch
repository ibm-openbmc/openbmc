From 9fd7227af9423322e1ca149b42d327840f9fd7e8 Mon Sep 17 00:00:00 2001
From: LuluTHSu <Lulu_Su@wistron.com>
Date: Mon, 24 Apr 2023 09:41:32 +0800
Subject: [PATCH] Fix psu signal and vout issue

Due to mowgli's psu(Artesyn)doesn't support PMBus PEC checking,
thermal reading and linear-16-conversion-formula, need to remove
them by updating driver patch for fix PSU(Artesyn) read errors
and detect mfr_id to compatible PSU(Delta).

Signed-off-by: Andy YF Wang <Andy_YF_Wang@wistron.com>
Signed-off-by: LuluTHSu <Lulu_Su@wistron.com>
Signed-off-by: Pat Lin <Pat_Lin@wistron.com>
---
 drivers/hwmon/pmbus/ibm-cffps.c  | 21 ++++++++++++--
 drivers/hwmon/pmbus/pmbus_core.c |  2 +-
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/drivers/hwmon/pmbus/ibm-cffps.c b/drivers/hwmon/pmbus/ibm-cffps.c
index 7cf4cc5824ab..607eb4798459 100644
--- a/drivers/hwmon/pmbus/ibm-cffps.c
+++ b/drivers/hwmon/pmbus/ibm-cffps.c
@@ -18,6 +18,7 @@
 
 #include "pmbus.h"
 
+#define CFFPS_MFG_ID_CMD			0x99
 #define CFFPS_FRU_CMD				0x9A
 #define CFFPS_PN_CMD				0x9B
 #define CFFPS_HEADER_CMD			0x9C
@@ -57,6 +58,7 @@
 
 enum {
 	CFFPS_DEBUGFS_INPUT_HISTORY = 0,
+	CFFPS_DEBUGFS_MFG_ID,
 	CFFPS_DEBUGFS_FRU,
 	CFFPS_DEBUGFS_PN,
 	CFFPS_DEBUGFS_HEADER,
@@ -444,8 +446,7 @@ static struct pmbus_driver_info ibm_cffps_info[] = {
 	[cffps1] = {
 		.pages = 1,
 		.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_VOUT | PMBUS_HAVE_IOUT |
-			PMBUS_HAVE_PIN | PMBUS_HAVE_FAN12 | PMBUS_HAVE_TEMP |
-			PMBUS_HAVE_TEMP2 | PMBUS_HAVE_TEMP3 |
+			PMBUS_HAVE_PIN | PMBUS_HAVE_FAN12 |
 			PMBUS_HAVE_STATUS_VOUT | PMBUS_HAVE_STATUS_IOUT |
 			PMBUS_HAVE_STATUS_INPUT | PMBUS_HAVE_STATUS_TEMP |
 			PMBUS_HAVE_STATUS_FAN12,
@@ -491,15 +492,24 @@ static int ibm_cffps_probe(struct i2c_client *client,
 		u16 ccin_revision = 0;
 		u16 ccin_version = CFFPS_CCIN_VERSION_1;
 		int ccin = i2c_smbus_read_word_swapped(client, CFFPS_CCIN_CMD);
+		char mfg_id[I2C_SMBUS_BLOCK_MAX + 2] = { 0 };
 
 		if (ccin > 0) {
 			ccin_revision = FIELD_GET(CFFPS_CCIN_REVISION, ccin);
 			ccin_version = FIELD_GET(CFFPS_CCIN_VERSION, ccin);
 		}
 
+		rc = i2c_smbus_read_block_data(client, PMBUS_MFR_ID, mfg_id);
+		if (rc < 0) {
+			dev_err(&client->dev, "Failed to read Manufacturer ID\n");
+			return rc;
+		}
+
 		switch (ccin_version) {
 		default:
 		case CFFPS_CCIN_VERSION_1:
+			if (strncmp(mfg_id, "ARTE", 4) == 0) 
+				ibm_cffps_pdata.flags = PMBUS_SKIP_STATUS_CHECK | PMBUS_NO_CAPABILITY ;
 			vs = cffps1;
 			break;
 		case CFFPS_CCIN_VERSION_2:
diff --git a/drivers/hwmon/pmbus/pmbus_core.c b/drivers/hwmon/pmbus/pmbus_core.c
index 0f3815583fd9..418e07074fd6 100644
--- a/drivers/hwmon/pmbus/pmbus_core.c
+++ b/drivers/hwmon/pmbus/pmbus_core.c
@@ -635,7 +635,7 @@ static long pmbus_reg2data_linear(struct pmbus_data *data,
 	s32 mantissa;
 	long val;
 
-	if (sensor->class == PSC_VOLTAGE_OUT) {	/* LINEAR16 */
+	if (sensor->class == PSC_VOLTAGE_OUT && !(data->flags & PMBUS_NO_CAPABILITY)) {	/* LINEAR16 */
 		exponent = data->exponent[sensor->page];
 		mantissa = (u16) sensor->data;
 	} else {				/* LINEAR11 */
-- 
2.17.1

